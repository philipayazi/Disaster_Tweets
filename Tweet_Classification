{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "Tweet_Classification_4.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "JibnR8TjHzTb",
        "3UN3aAi1qt9g",
        "3Z5ds3V5qt-a",
        "afIF_P_wQQcC",
        "Ss35NGIuQQdT",
        "yEhsRtzNQQdM",
        "AySDxnWlQQcH",
        "Iaw9q8D7QQcz",
        "NQUj8DOSQQdE"
      ],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python [conda env:DisasterTweets] *",
      "language": "python",
      "name": "conda-env-DisasterTweets-py"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Y16PDSXLqt7F",
        "colab": {}
      },
      "source": [
        "# import libraries\n",
        "from gensim.parsing.preprocessing import preprocess_string\n",
        "from gensim.parsing.preprocessing import strip_punctuation,strip_multiple_whitespaces,remove_stopwords\n",
        "from gensim.models import TfidfModel\n",
        "import pandas as pd\n",
        "from gensim.corpora import Dictionary\n",
        "import numpy as np\n",
        "import xgboost\n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, confusion_matrix, roc_curve\n",
        "\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "\n",
        "from scipy.stats import uniform\n",
        "from scipy.stats import randint\n",
        "\n",
        "from gensim.corpora import Dictionary\n",
        "\n",
        "import xgboost as xgb\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "2tia8-8jqt7R",
        "colab": {}
      },
      "source": [
        "# read data from github\n",
        "\n",
        "url = \"https://github.com/philipayazi/Disaster_Tweets/raw/master/nlp-getting-started/train.csv\"\n",
        "train_df = pd.read_csv(url)"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "d4J7_p5Vqt7Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "e241f850-734c-486f-d55b-ad585a1b6e8e"
      },
      "source": [
        "# observe how the data looks\n",
        "train_df.head()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>keyword</th>\n",
              "      <th>location</th>\n",
              "      <th>text</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Our Deeds are the Reason of this #earthquake M...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Forest fire near La Ronge Sask. Canada</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>All residents asked to 'shelter in place' are ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>13,000 people receive #wildfires evacuation or...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   id keyword  ...                                               text target\n",
              "0   1     NaN  ...  Our Deeds are the Reason of this #earthquake M...      1\n",
              "1   4     NaN  ...             Forest fire near La Ronge Sask. Canada      1\n",
              "2   5     NaN  ...  All residents asked to 'shelter in place' are ...      1\n",
              "3   6     NaN  ...  13,000 people receive #wildfires evacuation or...      1\n",
              "4   7     NaN  ...  Just got sent this photo from Ruby #Alaska as ...      1\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "D9FgPfYqqt7i",
        "colab": {}
      },
      "source": [
        "# clean tweets of white spaces, punctuations, stopwords, and make all letters lowercase\n",
        "custom_filters = [lambda x: x.lower(),\n",
        "                  strip_multiple_whitespaces,\n",
        "                  strip_punctuation,\n",
        "                  remove_stopwords]\n",
        "\n",
        "def clean_string(row):\n",
        "    return preprocess_string(row['text'], custom_filters)"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "N5J02jA9qt7p",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "57be6a6a-0a6b-4a8e-f076-62888b96fa38"
      },
      "source": [
        "# append cleaned tweets to dataframe\n",
        "train_df['cleaned_tweets'] = train_df.apply(clean_string, axis=1)\n",
        "\n",
        "train_df.head()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>keyword</th>\n",
              "      <th>location</th>\n",
              "      <th>text</th>\n",
              "      <th>target</th>\n",
              "      <th>cleaned_tweets</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Our Deeds are the Reason of this #earthquake M...</td>\n",
              "      <td>1</td>\n",
              "      <td>[deeds, reason, earthquake, allah, forgive]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Forest fire near La Ronge Sask. Canada</td>\n",
              "      <td>1</td>\n",
              "      <td>[forest, near, la, ronge, sask, canada]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>All residents asked to 'shelter in place' are ...</td>\n",
              "      <td>1</td>\n",
              "      <td>[residents, asked, shelter, place, notified, o...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>13,000 people receive #wildfires evacuation or...</td>\n",
              "      <td>1</td>\n",
              "      <td>[13, 000, people, receive, wildfires, evacuati...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n",
              "      <td>1</td>\n",
              "      <td>[got, sent, photo, ruby, alaska, smoke, wildfi...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   id keyword  ... target                                     cleaned_tweets\n",
              "0   1     NaN  ...      1        [deeds, reason, earthquake, allah, forgive]\n",
              "1   4     NaN  ...      1            [forest, near, la, ronge, sask, canada]\n",
              "2   5     NaN  ...      1  [residents, asked, shelter, place, notified, o...\n",
              "3   6     NaN  ...      1  [13, 000, people, receive, wildfires, evacuati...\n",
              "4   7     NaN  ...      1  [got, sent, photo, ruby, alaska, smoke, wildfi...\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "y6mEjNgOqt7v",
        "colab": {}
      },
      "source": [
        "# convert cleaned_tweets column to a list so that we can create a 2D array\n",
        "cleaned_tweets_lst = train_df['cleaned_tweets'].to_list()"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "qhaoVZNpqt72",
        "colab": {}
      },
      "source": [
        "# make cleaned_tweets_lst a list of lists i.e. a 2D array\n",
        "cleaned_tweets_lst = [' '.join(cleaned_tweet) for cleaned_tweet in cleaned_tweets_lst]"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "RKlJSvOHqt7-",
        "colab": {}
      },
      "source": [
        "# convert cleaned_tweets column to dictionary\n",
        "# dct = Dictionary(train_df.cleaned_tweets)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "T2L1HNxFqt8D",
        "colab": {}
      },
      "source": [
        "# convert dictionary to matrix\n",
        "# gen_corpus = [dct.doc2bow(line) for line in train_df.cleaned_tweets]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "PdFUNyY25-gX",
        "colab": {}
      },
      "source": [
        "# gen_corpus[:5]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "IcaY4EIvqt8J",
        "colab": {}
      },
      "source": [
        "# create model\n",
        "\n",
        "# td_model = TfidfModel(gen_corpus)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "MXSHh5dkqt8Q",
        "colab": {}
      },
      "source": [
        "# model"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "zrXSn_IEqt8V",
        "colab": {}
      },
      "source": [
        "# fit model\n",
        "# vector = model[corpus]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "kenkS4FEqt8b",
        "colab": {}
      },
      "source": [
        "# print(vector)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "DClU2aRLqt8j",
        "colab": {}
      },
      "source": [
        "# vector_0 = model[corpus[0]]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "czei8ajqqt8p",
        "colab": {}
      },
      "source": [
        "# vector_1 = model[corpus[1]]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Ej2XQPKJqt8w",
        "colab": {}
      },
      "source": [
        "# The above code does not seem to be correct because it is treating redundent words as unique. Create dictionary of\n",
        "# frequency counts of unique words\n",
        "# from collections import defaultdict\n",
        "# frequency = defaultdict(int)\n",
        "# for text in train_df.cleaned_tweets:\n",
        "#     for token in text:\n",
        "#         frequency[token] += 1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "6DU2jk3xqt83",
        "colab": {}
      },
      "source": [
        "# convert default dictionary to dictionary\n",
        "# frequency = dict(frequency)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "JibnR8TjHzTb"
      },
      "source": [
        "#EDA of Data Set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "i1997FsbH8KI",
        "colab": {}
      },
      "source": [
        "# Determine if training data set is balanced\n",
        "target_count = train_df.groupby('target').count().drop(columns = ['id', 'keyword', 'location', 'text'], axis=1)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "btDyzCjBH7-w",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        },
        "outputId": "7b68c98f-7b93-4b28-edeb-43d23173b678"
      },
      "source": [
        "# Data shows 57% to 43% disaster non related to related tweets\n",
        "target_count"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cleaned_tweets</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>target</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4342</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3271</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        cleaned_tweets\n",
              "target                \n",
              "0                 4342\n",
              "1                 3271"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "MeYSqwOSPo0L",
        "colab": {}
      },
      "source": [
        "target_pct = round(target_count.div(target_count['cleaned_tweets'].sum()) * 100, 2)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "1gupD9A5H778",
        "colab": {}
      },
      "source": [
        "target_pct = target_pct.rename(columns={'cleaned_tweets': \"percent\"})"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "PD44Y-T2O22P",
        "colab": {}
      },
      "source": [
        "target_pct = target_pct.reset_index()"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "env8UizR1A4F",
        "colab": {}
      },
      "source": [
        "target_pct = target_pct.replace({\"target\":{0: \"False\", 1: \"True\"}})"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Tf6wqf8PL2xK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 668
        },
        "outputId": "a10c15a0-cfa0-4e59-d87b-cc15b5012d05"
      },
      "source": [
        "from matplotlib import pyplot as plt    \n",
        "\n",
        "fig = plt.figure(figsize=(10,10))\n",
        "plt.bar(target_pct['target'], target_pct['percent'])\n",
        "fig.suptitle('Percentage of True vs False Classificatins \\n of Tweets Related to Disasters', fontsize=20, y=.95)\n",
        "plt.xlabel('Disaster', fontsize=18)\n",
        "plt.ylabel('Percentage of Tweets', fontsize=18)\n",
        "plt.xticks(fontsize=14)\n",
        "plt.yticks(fontsize=14)\n",
        "fig.savefig('classification_balance.png')"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ffEJ5CU_Sz_P",
        "colab_type": "text"
      },
      "source": [
        "#Split dat into Train and Test sets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fi4GWoqGS_rY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train_list, X_test_list, y_train_list, y_test_list = train_test_split(cleaned_tweets_lst, train_df['target'], test_size =0.3, random_state =42)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "3UN3aAi1qt9g"
      },
      "source": [
        "# All of these analyses are on dense vectors. We need to analyze sparse vectors"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "jGns2sxhqt9i",
        "colab": {}
      },
      "source": [
        "# from sklearn.feature_extraction.text import CountVectorizer\n",
        "# from sklearn.model_selection import train_test_split"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "fHBWA2Szqt9m",
        "colab": {}
      },
      "source": [
        "# X_train_split, X_test_split, y_train_split, y_test_split = train_test_split(cleaned_tweets_lst, train_df['target'], test_size = 0.3, random_state = 42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "gdIypiXdqt9r",
        "colab": {}
      },
      "source": [
        "train_corpus = X_train_list\n",
        "\n",
        "train_vectorizer = CountVectorizer()\n",
        "\n",
        "X_train = train_vectorizer.fit_transform(train_corpus)"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "XEFydgaSqt9y",
        "colab": {}
      },
      "source": [
        "test_corpus = X_test_list\n",
        "\n",
        "X_test = train_vectorizer.transform(test_corpus)"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "JufGDFHIqt93",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a40a1c99-dd6c-40be-c18a-995de3b61017"
      },
      "source": [
        "X_train_shaped = X_train.shape\n",
        "\n",
        "X_train_shaped"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5329, 16712)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "ge1HO8-Mqt98",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "85f0aceb-4f6d-45ee-a8f8-e1ea790e1eea"
      },
      "source": [
        "X_test_shaped = X_test.shape\n",
        "\n",
        "X_test_shaped"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2284, 16712)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "M5ihpgRnqt-B",
        "colab": {}
      },
      "source": [
        "train_vectorizer.vocabulary_"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "-IBpG96Qqt-I",
        "colab": {}
      },
      "source": [
        "feature_names = train_vectorizer.get_feature_names()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "agKMPc3hqt-N",
        "colab": {}
      },
      "source": [
        "sparse_vectors = X_train.toarray()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "YNifxwR8qt-S",
        "colab": {}
      },
      "source": [
        "sparse_vectors[0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "3Z5ds3V5qt-a"
      },
      "source": [
        "# Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "tQeTqUSoqt-b",
        "colab": {}
      },
      "source": [
        "# from sklearn.linear_model import LogisticRegression"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "k3iydBHVqt-i",
        "colab": {}
      },
      "source": [
        "# model = LogisticRegression().fit(X_train, y_train_split)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "m4wHH5Rrqt-o",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "9a46c53e-e294-404a-899e-1e2b65864ac5"
      },
      "source": [
        "# model.score(X_train, y_train_split)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9711015199849878"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "0q4xohFNqt-u",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "0408d325-d51c-47c5-fe93-e190540dc68d"
      },
      "source": [
        "# model.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 1, ..., 1, 1, 0])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "-Ijj-q2Hqt-4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "9f192011-b5ec-4a87-9721-e7abc33cbdea"
      },
      "source": [
        "# model.score(X_test, y_test_split)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7981611208406305"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BapkzuYQQQbl",
        "colab_type": "text"
      },
      "source": [
        "## Feature Engieering via \"CountVectorizer\"  \n",
        "\n",
        "- From List to Matrix via \"CountVectorizer\" \n",
        "\n",
        "- List shape: N_tweets x 1\n",
        "- Matrix shape: N_tweets x N_WordsInCorpus"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wim5BotGQQbm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_vectorizer = CountVectorizer()\n",
        "Xcv_train_matrix = train_vectorizer.fit_transform(X_train_list)\n",
        "Xcv_test_matrix = train_vectorizer.transform(X_test_list)"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AKcdY9SYQQbs",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# # Scale feature data (most likely not needed for CV features)\n",
        "\n",
        "# x_scaler = StandardScaler(with_mean=False).fit(Xcv_train_matrix)\n",
        "\n",
        "# Xcv_train_matrix = x_scaler.transform(Xcv_train_matrix)\n",
        "# Xcv_test_matrix = x_scaler.transform(Xcv_test_matrix)"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I2jMDqd-QQbz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "29e5bc9b-38a6-4b1c-b862-25c85637c3c5"
      },
      "source": [
        "# Make sure the length of train and test matrix are the same\n",
        "print('Train matrix shape', Xcv_train_matrix.shape)\n",
        "print('Test matrix shape', Xcv_test_matrix.shape)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train matrix shape (5329, 16712)\n",
            "Test matrix shape (2284, 16712)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IXZ4CsTSQQb3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "feature_names = train_vectorizer.get_feature_names()\n",
        "#print(feature_names)\n",
        "train_vectorizer.vocabulary_\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kYWBxN6EQQb9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "d2099d50-eb85-4e80-a1c3-68fbc716d5a1"
      },
      "source": [
        "sparse_vectors = Xcv_train_matrix.toarray()\n",
        "\n",
        "Tweet_nbr =0;\n",
        "Word_nbr =1820;  #e.g., 1820 = 'australia'\n",
        "\n",
        "sparse_vectors[0,1820]  # we get ones (or twos) at the right place"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "afIF_P_wQQcC",
        "colab_type": "text"
      },
      "source": [
        "## Features: CountVectorizer, Classifier: Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "Y7n622NOQQcD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "d54ede77-cedc-4877-c314-01301e2893b3"
      },
      "source": [
        "model_CV_LR =LogisticRegression(n_jobs=-1).fit(Xcv_train_matrix, y_train_list)\n",
        "\n",
        "CV_LR_score_train =model_CV_LR.score(Xcv_train_matrix, y_train_list)\n",
        "#model_LR.predict(Xcv_test_matrix)\n",
        "CV_LR_score_test =model_CV_LR.score(Xcv_test_matrix, y_test_list)\n",
        "\n",
        "print('score for test data:', CV_LR_score_test)\n",
        "print(classification_report(y_test_list, model_CV_LR.predict(Xcv_test_matrix)) )"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "score for test data: 0.7981611208406305\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.87      0.83      1318\n",
            "           1       0.80      0.70      0.75       966\n",
            "\n",
            "    accuracy                           0.80      2284\n",
            "   macro avg       0.80      0.79      0.79      2284\n",
            "weighted avg       0.80      0.80      0.80      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ss35NGIuQQdT",
        "colab_type": "text"
      },
      "source": [
        "## Features: CountVectorizer,  Classifier: Randon Forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yr4H6CXZQQdU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "77c93777-bbb6-4cc6-f58c-c38112abe292"
      },
      "source": [
        "model_CV_RF =RandomForestClassifier(n_jobs=-1).fit(Xtf_train_matrix, y_train_list)\n",
        "\n",
        "CV_RF_score_train =model_CV_RF.score(Xcv_train_matrix, y_train_list)\n",
        "\n",
        "CV_RF_score_test =model_CV_RF.score(Xcv_test_matrix, y_test_list)\n",
        "\n",
        "print('score for test data:', CV_RF_score_test)\n",
        "print(classification_report(y_test_list, model_CV_RF.predict(Xcv_test_matrix)) )"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "score for test data: 0.7697022767075307\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.86      0.81      1318\n",
            "           1       0.77      0.64      0.70       966\n",
            "\n",
            "    accuracy                           0.77      2284\n",
            "   macro avg       0.77      0.75      0.76      2284\n",
            "weighted avg       0.77      0.77      0.77      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yEhsRtzNQQdM",
        "colab_type": "text"
      },
      "source": [
        "## Features: CountVectorizer,  Classifier: XGBooster"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1NcfesorQQdN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "5d730365-f7e9-4c2a-94bf-64aaa5a028cf"
      },
      "source": [
        "model_CV_XGB = xgb.XGBClassifier(objective=\"binary:logistic\", n_jobs=-1, random_state= 42)\n",
        "model_CV_XGB.fit(Xcv_train_matrix, y_train_list)"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
              "              colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
              "              learning_rate=0.1, max_delta_step=0, max_depth=3,\n",
              "              min_child_weight=1, missing=None, n_estimators=100, n_jobs=-1,\n",
              "              nthread=None, objective='binary:logistic', random_state=42,\n",
              "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
              "              silent=None, subsample=1, verbosity=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uVVRPMJZQQdQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "397e56ca-8c3a-471d-e385-59f5d6b5b5f0"
      },
      "source": [
        "y_pred = model_TF_XGB.predict(Xcv_test_matrix)\n",
        "#print(confusion_matrix(y_test_list, y_pred))\n",
        "\n",
        "CV_XGB_score_train =model_CV_XGB.score(Xcv_train_matrix, y_train_list)\n",
        "CV_XGB_score_test =model_CV_XGB.score(Xcv_test_matrix, y_test_list)\n",
        "\n",
        "print('score for test data:', CV_XGB_score_test)\n",
        "print(classification_report(y_test_list, model_CV_XGB.predict(Xcv_test_matrix)) )"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "score for test data: 0.7513134851138353\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.72      0.95      0.81      1318\n",
            "           1       0.87      0.49      0.62       966\n",
            "\n",
            "    accuracy                           0.75      2284\n",
            "   macro avg       0.79      0.72      0.72      2284\n",
            "weighted avg       0.78      0.75      0.73      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AySDxnWlQQcH",
        "colab_type": "text"
      },
      "source": [
        "## Features: TFIDF,  Classifier: Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z2649bXCQQcI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_vectorizer = TfidfVectorizer()"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b30b95bJQQcL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# fit and transform the train data and transform the test data\n",
        "Xtf_train_matrix = train_vectorizer.fit_transform(X_train_list)\n",
        "Xtf_test_matrix = train_vectorizer.transform(X_test_list)"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XBoWCWL5QQcP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# # Scale feature data (most likely not needed for CV features)\n",
        "# x_scaler = StandardScaler(with_mean=False).fit(Xtf_train_matrix)\n",
        "\n",
        "# Xtf_train_matrix = x_scaler.transform(Xtf_train_matrix)\n",
        "# Xtf_test_matrix = x_scaler.transform(Xtf_test_matrix)"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "habpNDcaQQcT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "61e70168-d189-4661-f2ae-e30475b303c9"
      },
      "source": [
        "# Confirm the shape of the matrices\n",
        "print('Train matrix shape', Xtf_train_matrix.shape)\n",
        "print('Test matrix shape', Xtf_test_matrix.shape)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train matrix shape (5329, 16712)\n",
            "Test matrix shape (2284, 16712)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5RS5fhl3QQcZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8bddbe36-53fa-458e-ad1a-1bac24cf8332"
      },
      "source": [
        "Xtf_train_matrix[0,1820]"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.49047078831542945"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mi59FHFQQQcg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "6b9d896b-17e4-4cf7-a498-ecce885fcc39"
      },
      "source": [
        "Xtf_train_matrix[0,276]  #w/out scaling was: 0.19644613494912055"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.19644613494912055"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eh37C4ZyQQcl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "feature_names = train_vectorizer.get_feature_names()\n",
        "## print(feature_names)\n",
        "train_vectorizer.vocabulary_"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yzyPBMqgQQcq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# fit logistic regression to train data\n",
        "model_TF_LR =LogisticRegression(n_jobs=-1).fit(Xtf_train_matrix, y_train_list)"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BwSrheE5QQcv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "9a4a09e2-af44-458f-d129-b4d3706694e9"
      },
      "source": [
        "# find stats of train and test data\n",
        "TF_LR_score_train =model_TF_LR.score(Xtf_train_matrix, y_train_list)\n",
        "\n",
        "TF_LR_score_test =model_TF_LR.score(Xtf_test_matrix, y_test_list)\n",
        "\n",
        "print('score for test data:', TF_LR_score_test)\n",
        "print(classification_report(y_test_list, model_TF_LR.predict(Xtf_test_matrix)) )"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "score for test data: 0.7990367775831874\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.88      0.83      1318\n",
            "           1       0.81      0.69      0.74       966\n",
            "\n",
            "    accuracy                           0.80      2284\n",
            "   macro avg       0.80      0.78      0.79      2284\n",
            "weighted avg       0.80      0.80      0.80      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Iaw9q8D7QQcz",
        "colab_type": "text"
      },
      "source": [
        "## Features: TFIDF,  Classifier: Randon Forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5WOtGw6bQQcz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# fit classifier to train data\n",
        "model_TF_RF =RandomForestClassifier(n_jobs=-1).fit(Xtf_train_matrix, y_train_list)"
      ],
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZgPxn1-2QQc3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "85940dbc-52ee-47a5-bccd-0c02f82ad3a5"
      },
      "source": [
        "# find stats on train and test data\n",
        "TF_RF_score_train =model_TF_RF.score(Xtf_train_matrix, y_train_list)\n",
        "\n",
        "TF_RF_score_test =model_TF_RF.score(Xtf_test_matrix, y_test_list)\n",
        "\n",
        "print('score for test data:', TF_RF_score_test)\n",
        "print(classification_report(y_test_list, model_TF_RF.predict(Xtf_test_matrix)) )"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "score for test data: 0.7880910683012259\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.90      0.83      1318\n",
            "           1       0.83      0.63      0.72       966\n",
            "\n",
            "    accuracy                           0.79      2284\n",
            "   macro avg       0.80      0.77      0.77      2284\n",
            "weighted avg       0.79      0.79      0.78      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-7_dgFyRQQc7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "665ffce9-2a2b-4ac8-acb9-7cf73e212ed6"
      },
      "source": [
        "model_TF_RF.feature_importances_"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.46534115e-04, 9.03923681e-06, 8.28227209e-06, ...,\n",
              "       4.31367089e-05, 1.10272671e-04, 3.10040005e-10])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_swqtj0DQQc_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "outputId": "53872b5a-d67c-48e1-b4c0-e8139fb6fe7b"
      },
      "source": [
        "# find most important words contributing to the classifier\n",
        "feat_sortedlist =sorted(zip(model_TF_RF.feature_importances_, feature_names), reverse=True)\n",
        "\n",
        "# top 12 features\n",
        "feat_sortedlist[0:12]"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(0.02776535893667571, 'http'),\n",
              " (0.007220604058553893, 'hiroshima'),\n",
              " (0.007061272107765204, 'fires'),\n",
              " (0.0063462569748276325, 'california'),\n",
              " (0.005579276193196549, 'killed'),\n",
              " (0.005204557248446957, 'buildings'),\n",
              " (0.0049482305700996165, 'suicide'),\n",
              " (0.004896004046125661, 'storm'),\n",
              " (0.004713018346746325, 'disaster'),\n",
              " (0.004501487769292689, 'wildfire'),\n",
              " (0.004236014438021529, 'bombing'),\n",
              " (0.004219624892963265, 'police')]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NQUj8DOSQQdE",
        "colab_type": "text"
      },
      "source": [
        "## Features: TFIDF,  Classifier: XGBooster"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pB_LAlBaQQdF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "f058e234-9b07-44fe-b01f-eedbc295c3ab"
      },
      "source": [
        "# fit classifier to train data\n",
        "model_TF_XGB = xgb.XGBClassifier(objective=\"binary:logistic\", n_jobs=-1, random_state= 42)\n",
        "model_TF_XGB.fit(Xtf_train_matrix, y_train_list)"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
              "              colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
              "              learning_rate=0.1, max_delta_step=0, max_depth=3,\n",
              "              min_child_weight=1, missing=None, n_estimators=100, n_jobs=-1,\n",
              "              nthread=None, objective='binary:logistic', random_state=42,\n",
              "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
              "              silent=None, subsample=1, verbosity=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oXkfe_74QQdJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "755407bf-3cb8-4a10-ae7e-7d48b2d705ab"
      },
      "source": [
        "y_pred = model_TF_XGB.predict(Xtf_test_matrix)\n",
        "#print(confusion_matrix(y_test_list, y_pred))\n",
        "\n",
        "# find stats of test data\n",
        "TF_XGB_score_train =model_TF_XGB.score(Xtf_train_matrix, y_train_list)\n",
        "TF_XGB_score_test =model_TF_XGB.score(Xtf_test_matrix, y_test_list)\n",
        "\n",
        "print('score for test data:', TF_XGB_score_test)\n",
        "print(classification_report(y_test_list, model_TF_XGB.predict(Xtf_test_matrix)) )"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "score for test data: 0.7351138353765324\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.70      0.95      0.81      1318\n",
            "           1       0.88      0.44      0.58       966\n",
            "\n",
            "    accuracy                           0.74      2284\n",
            "   macro avg       0.79      0.70      0.69      2284\n",
            "weighted avg       0.77      0.74      0.71      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kKJB5kWpQQdX",
        "colab_type": "text"
      },
      "source": [
        "## Summary of results so far"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WFc_Yd7DQQdY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "822cd8a3-4b8d-4148-ae14-5f5f42435101"
      },
      "source": [
        "print('--------- CV features ------------------------')\n",
        "print('score for CV->LR:', CV_LR_score_test)\n",
        "print('score for CV->RF:', CV_RF_score_test)\n",
        "print('score for CV->XGB:', CV_XGB_score_test)\n",
        "\n",
        "print('--------- TFIDF features ---------------------')\n",
        "print('score for TF->LR:', TF_LR_score_test)\n",
        "print('score for TF->RF:', TF_RF_score_test)\n",
        "print('score for TF->XGB:', TF_XGB_score_test)\n"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--------- CV features ------------------------\n",
            "score for CV->LR: 0.7981611208406305\n",
            "score for CV->RF: 0.7697022767075307\n",
            "score for CV->XGB: 0.7513134851138353\n",
            "--------- TFIDF features ---------------------\n",
            "score for TF->LR: 0.7990367775831874\n",
            "score for TF->RF: 0.7880910683012259\n",
            "score for TF->XGB: 0.7351138353765324\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wS5SXSF9QQdb",
        "colab_type": "text"
      },
      "source": [
        "## Tune CV+LR  --- HyperParameter tuning via \"GridSearch\""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XrV6hbNEQQdb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "04d32919-8ad9-4d3e-def5-f92a5d9c71a6"
      },
      "source": [
        "model =LogisticRegression(n_jobs=-1)    # gstmodel: grid search tuned model\n",
        "\n",
        "# Create the GridSearch estimator along with a parameter object containing the values to adjust\n",
        "param_grid = {'C': [.1, .2, .5, 1, 2, 3, 5, 10], \n",
        "              'solver': ['newton-cg', 'lbfgs', 'liblinear']} \n",
        "\n",
        "grid = GridSearchCV(model, param_grid, verbose=3, n_jobs=-1)\n",
        "\n",
        "grid.fit(Xcv_train_matrix, y_train_list)\n",
        "\n",
        "print(grid.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "GST_CV_LR_score_test =grid.score(Xcv_test_matrix, y_test_list)\n",
        "print(GST_CV_LR_score_test)\n",
        "\n",
        "# # Calculate classification report for Tuned Model\n",
        "# predictions = grid.predict(Xcv_test_matrix)\n",
        "# from sklearn.metrics import classification_report\n",
        "# print(classification_report(y_test, predictions,\n",
        "#                             target_names=[\"blue\", \"red\"]))"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 24 candidates, totalling 120 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:    2.4s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'C': 0.2, 'solver': 'newton-cg'}\n",
            "0.8016637478108581\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 120 out of 120 | elapsed:   10.1s finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X9RVv0IWQQde",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "a3d32714-cc3f-49e8-d13b-2df217da4a43"
      },
      "source": [
        "print(classification_report(y_test_list, grid.predict(Xcv_test_matrix)) )"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.90      0.84      1318\n",
            "           1       0.83      0.67      0.74       966\n",
            "\n",
            "    accuracy                           0.80      2284\n",
            "   macro avg       0.81      0.78      0.79      2284\n",
            "weighted avg       0.81      0.80      0.80      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JOLQlpLYQQdm",
        "colab_type": "text"
      },
      "source": [
        "## Tune TF+LR  --- HyperParameter tuning via \"GridSearch\""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pzQWVeIFQQdn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "022cabd0-4743-45db-c61c-304ad1f1866d"
      },
      "source": [
        "model =LogisticRegression(n_jobs=-1)    \n",
        "param_grid = {'C': [.1, .2, .5, 1, 2, 3, 5, 10], \n",
        "              'solver': ['newton-cg', 'lbfgs', 'liblinear']} \n",
        "grid = GridSearchCV(model, param_grid, verbose=3, n_jobs=-1)\n",
        "grid.fit(Xtf_train_matrix, y_train_list)\n",
        "print(grid.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "GST_TF_LR_score_test =grid.score(Xtf_test_matrix, y_test_list)\n",
        "print(GST_TF_LR_score_test)"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 24 candidates, totalling 120 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  52 tasks      | elapsed:    2.4s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'C': 2, 'solver': 'newton-cg'}\n",
            "0.7990367775831874\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done 120 out of 120 | elapsed:    6.4s finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b2G6yINRQQdq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "46a25a2f-71a1-48c4-e966-8b695ca7e85b"
      },
      "source": [
        "print(classification_report(y_test_list, grid.predict(Xtf_test_matrix)) )"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.86      0.83      1318\n",
            "           1       0.79      0.72      0.75       966\n",
            "\n",
            "    accuracy                           0.80      2284\n",
            "   macro avg       0.80      0.79      0.79      2284\n",
            "weighted avg       0.80      0.80      0.80      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2apyjmjuQQdu",
        "colab_type": "text"
      },
      "source": [
        "## Tune CV+RF  --- HyperParameter tuning via \"GridSearch\""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9sPH4s0sQQdu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "52d54fc2-5e20-4779-b5e9-0b70c6a9601d"
      },
      "source": [
        "model =RandomForestClassifier(n_jobs=-1)    \n",
        "\n",
        "param_grid = {'n_estimators': [50, 100],     \n",
        "              'max_features': ['sqrt', 'log2']} \n",
        "grid = GridSearchCV(model, param_grid, verbose=3, n_jobs=-1)\n",
        "\n",
        "grid.fit(Xcv_train_matrix, y_train_list)\n",
        "\n",
        "print(grid.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "GST_CV_RF_score_test =grid.score(Xcv_test_matrix, y_test_list)\n",
        "\n",
        "print(GST_CV_RF_score_test)"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 4 candidates, totalling 20 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:  2.0min finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'max_features': 'sqrt', 'n_estimators': 50}\n",
            "0.7859019264448336\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LDEXN6VKQQdx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "9de96233-4fdb-4d65-b67c-6bb5f16fc6bc"
      },
      "source": [
        "print(classification_report(y_test_list, grid.predict(Xcv_test_matrix)) )"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.76      0.92      0.83      1318\n",
            "           1       0.85      0.60      0.70       966\n",
            "\n",
            "    accuracy                           0.79      2284\n",
            "   macro avg       0.80      0.76      0.77      2284\n",
            "weighted avg       0.80      0.79      0.78      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KPscbEwjQQd0",
        "colab_type": "text"
      },
      "source": [
        "## Tune TF+RF  --- HyperParameter tuning via \"GridSearch\""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s2NFoJd2QQd0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "84a7d1e2-ce94-495f-ba16-aad4edf5305a"
      },
      "source": [
        "model =RandomForestClassifier(n_jobs=-1)    \n",
        "\n",
        "param_grid = {'n_estimators': [50, 100],     \n",
        "              'max_features': ['sqrt', 'log2']} \n",
        "grid = GridSearchCV(model, param_grid, verbose=3, n_jobs=-1)\n",
        "\n",
        "grid.fit(Xtf_train_matrix, y_train_list)\n",
        "\n",
        "print(grid.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "GST_TF_RF_score_test =grid.score(Xtf_test_matrix, y_test_list)\n",
        "\n",
        "print(GST_TF_RF_score_test)"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 4 candidates, totalling 20 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:  1.9min finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'max_features': 'sqrt', 'n_estimators': 100}\n",
            "0.7933450087565674\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iQMdwLROQQd6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "1f1964d7-f95c-4e06-f7f9-daac9757d024"
      },
      "source": [
        "print(classification_report(y_test_list, grid.predict(Xtf_test_matrix)) )"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.78      0.90      0.83      1318\n",
            "           1       0.83      0.64      0.72       966\n",
            "\n",
            "    accuracy                           0.79      2284\n",
            "   macro avg       0.80      0.77      0.78      2284\n",
            "weighted avg       0.80      0.79      0.79      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k3i77UezQQd-",
        "colab_type": "text"
      },
      "source": [
        "## Tune CV+XGB  --- HyperParameter tuning via \"GridSearch\""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YYUsOwDbQQd_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "79bce186-9cbb-4730-ddc1-a905265d2865"
      },
      "source": [
        "model = xgb.XGBClassifier(objective=\"binary:logistic\", n_jobs=-1, random_state= 42)\n",
        "model"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
              "              colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
              "              learning_rate=0.1, max_delta_step=0, max_depth=3,\n",
              "              min_child_weight=1, missing=None, n_estimators=100, n_jobs=-1,\n",
              "              nthread=None, objective='binary:logistic', random_state=42,\n",
              "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
              "              silent=None, subsample=1, verbosity=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s78Ag723QQeD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "8da3c0b7-60c1-4c97-8e7e-4dfae669acdc"
      },
      "source": [
        "param_grid = {'n_estimators': [100, 150],   \n",
        "              'learning_rate': ['.1', '.3']} \n",
        "\n",
        "grid = GridSearchCV(model, param_grid, verbose=3, n_jobs=-1)\n",
        "\n",
        "grid.fit(Xcv_train_matrix, y_train_list)\n",
        "\n",
        "print(grid.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "GST_CV_XGB_score_test =grid.score(Xcv_test_matrix, y_test_list)\n",
        "\n",
        "print(GST_CV_XGB_score_test)"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 4 candidates, totalling 20 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:   37.0s finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'learning_rate': '.3', 'n_estimators': 150}\n",
            "0.781523642732049\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UoXfBJKjQQeH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "e1baaf8e-e876-4b65-deb9-8cb8c9908376"
      },
      "source": [
        "print(classification_report(y_test_list, grid.predict(Xcv_test_matrix)) )"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.76      0.91      0.83      1318\n",
            "           1       0.83      0.61      0.70       966\n",
            "\n",
            "    accuracy                           0.78      2284\n",
            "   macro avg       0.79      0.76      0.77      2284\n",
            "weighted avg       0.79      0.78      0.77      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o2PfyD-DQQeM",
        "colab_type": "text"
      },
      "source": [
        "## Tune TF+XGB  --- HyperParameter tuning via \"GridSearch\""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "25AKzBQtQQeM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "1638570a-cc7a-4179-94d5-7cb74afd8129"
      },
      "source": [
        "model = xgb.XGBClassifier(objective=\"binary:logistic\", n_jobs=-1, random_state= 42)\n",
        "model"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
              "              colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
              "              learning_rate=0.1, max_delta_step=0, max_depth=3,\n",
              "              min_child_weight=1, missing=None, n_estimators=100, n_jobs=-1,\n",
              "              nthread=None, objective='binary:logistic', random_state=42,\n",
              "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
              "              silent=None, subsample=1, verbosity=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GZy2buFpQQeP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "7eb96931-cd0e-4f41-c882-d35e92a6ebd4"
      },
      "source": [
        "param_grid = {'n_estimators': [100, 150],   \n",
        "              'learning_rate': ['.1', '.3']} \n",
        "\n",
        "grid = GridSearchCV(model, param_grid, verbose=3, n_jobs=-1)\n",
        "\n",
        "grid.fit(Xtf_train_matrix, y_train_list)\n",
        "\n",
        "print(grid.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "GST_TF_XGB_score_test =grid.score(Xtf_test_matrix, y_test_list)\n",
        "\n",
        "print(GST_TF_XGB_score_test)"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 4 candidates, totalling 20 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:   41.5s finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'learning_rate': '.3', 'n_estimators': 150}\n",
            "0.7631348511383538\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HH2UAmbXQQeT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "0fc33c7d-4832-44ae-b180-a597306a28a9"
      },
      "source": [
        "print(classification_report(y_test_list, grid.predict(Xtf_test_matrix)) )"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.74      0.91      0.82      1318\n",
            "           1       0.82      0.57      0.67       966\n",
            "\n",
            "    accuracy                           0.76      2284\n",
            "   macro avg       0.78      0.74      0.74      2284\n",
            "weighted avg       0.77      0.76      0.75      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7CT7usnYQQea",
        "colab_type": "text"
      },
      "source": [
        "## Results"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UDAu2vwrQQea",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "e061361d-1064-4dec-b210-a653e6ecbce5"
      },
      "source": [
        "print(' ')\n",
        "print('*** Default Params')\n",
        "print('--------- CV features ------------------------')\n",
        "print('score for CV->LR:', CV_LR_score_test)\n",
        "print('score for CV->RF:', CV_RF_score_test)\n",
        "print('score for CV->XGB:', CV_XGB_score_test)\n",
        "\n",
        "print('--------- TFIDF features ---------------------')\n",
        "print('score for TF->LR:', TF_LR_score_test)\n",
        "print('score for TF->RF:', TF_RF_score_test)\n",
        "print('score for TF->XGB:', TF_XGB_score_test)"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " \n",
            "*** Default Params\n",
            "--------- CV features ------------------------\n",
            "score for CV->LR: 0.7981611208406305\n",
            "score for CV->RF: 0.7697022767075307\n",
            "score for CV->XGB: 0.7513134851138353\n",
            "--------- TFIDF features ---------------------\n",
            "score for TF->LR: 0.7990367775831874\n",
            "score for TF->RF: 0.7880910683012259\n",
            "score for TF->XGB: 0.7351138353765324\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CzN0Z_3jQQeg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "b2da5ca8-7330-475c-b246-b284b6813bf9"
      },
      "source": [
        "print(' ')\n",
        "print('*** Optimized Params via GridSearchCV')\n",
        "\n",
        "print('--------- CV features ------------------------')\n",
        "print('score for GST_CV->LR:', GST_CV_LR_score_test)\n",
        "print('score for GST_CV->RF:', GST_CV_RF_score_test)\n",
        "print('score for GST_CV->XGB:', GST_CV_XGB_score_test)\n",
        "\n",
        "print('--------- TFIDF features ---------------------')\n",
        "print('score for GST_TF->LR:', GST_TF_LR_score_test)\n",
        "print('score for GST_TF->RF:', GST_TF_RF_score_test)\n",
        "print('score for GST_TF->XGB:', GST_TF_XGB_score_test)"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " \n",
            "*** Optimized Params via GridSearchCV\n",
            "--------- CV features ------------------------\n",
            "score for GST_CV->LR: 0.8016637478108581\n",
            "score for GST_CV->RF: 0.7859019264448336\n",
            "score for GST_CV->XGB: 0.781523642732049\n",
            "--------- TFIDF features ---------------------\n",
            "score for GST_TF->LR: 0.7990367775831874\n",
            "score for GST_TF->RF: 0.7933450087565674\n",
            "score for GST_TF->XGB: 0.7631348511383538\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8P6GVr_qQQej",
        "colab_type": "text"
      },
      "source": [
        "## HyperParameter tuning via \"RandomizedSearchCV\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0GX_oALpQQek",
        "colab_type": "text"
      },
      "source": [
        "### CV+LR "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dklsfHKvQQek",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "94628676-10c8-44ad-eab8-deb1433210b7"
      },
      "source": [
        "model =LogisticRegression(n_jobs=-1)\n",
        "# Create the GridSearch estimator along with a parameter object containing the values to adjust\n",
        "dist = dict(C=uniform(loc=0, scale=4), solver =['newton-cg', 'lbfgs', 'liblinear'])\n",
        "mdl = RandomizedSearchCV(model, dist, random_state= 1708, verbose=3, n_jobs =-1)\n",
        "\n",
        "srch =mdl.fit(Xcv_train_matrix, y_train_list)\n",
        "print(srch.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "RST_CV_LR_score_test =srch.score(Xcv_test_matrix, y_test_list)\n",
        "print(RST_CV_LR_score_test)"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  47 out of  50 | elapsed:    3.9s remaining:    0.3s\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:    4.1s finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'C': 0.6030894010000329, 'solver': 'lbfgs'}\n",
            "0.8007880910683012\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dz1MHCjYQQen",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "dcab38d9-40c4-485a-cd48-5aedc0a969ec"
      },
      "source": [
        "print(classification_report(y_test_list, srch.predict(Xcv_test_matrix)) )"
      ],
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.88      0.84      1318\n",
            "           1       0.81      0.69      0.75       966\n",
            "\n",
            "    accuracy                           0.80      2284\n",
            "   macro avg       0.80      0.79      0.79      2284\n",
            "weighted avg       0.80      0.80      0.80      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WO5O_sW3QQeq",
        "colab_type": "text"
      },
      "source": [
        "### TF+LR"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WPCH2AGnQQer",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "1c0ef4ab-7c21-4692-8b7a-2991935ee716"
      },
      "source": [
        "model =LogisticRegression(n_jobs=-1)\n",
        "# Create the GridSearch estimator along with a parameter object containing the values to adjust\n",
        "dist = dict(C=uniform(loc=0, scale=4), solver =['newton-cg', 'lbfgs', 'liblinear'])\n",
        "mdl = RandomizedSearchCV(model, dist, random_state= 1708, verbose=3, n_jobs =-1)\n",
        "\n",
        "srch =mdl.fit(Xtf_train_matrix, y_train_list)\n",
        "print(srch.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "RST_TF_LR_score_test =srch.score(Xtf_test_matrix, y_test_list)\n",
        "print(RST_TF_LR_score_test)"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'C': 1.682343878823895, 'solver': 'lbfgs'}\n",
            "0.7999124343257443\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:    2.8s finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zTWGEV9VQQet",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "1d4237d7-eec6-4302-eb9d-c5ba8a172442"
      },
      "source": [
        "print(classification_report(y_test_list, srch.predict(Xtf_test_matrix)) )"
      ],
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.86      0.83      1318\n",
            "           1       0.79      0.71      0.75       966\n",
            "\n",
            "    accuracy                           0.80      2284\n",
            "   macro avg       0.80      0.79      0.79      2284\n",
            "weighted avg       0.80      0.80      0.80      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WvIv2nLPQQew",
        "colab_type": "text"
      },
      "source": [
        "### CV+RF"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WOOUpRhCQQex",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "40f5434a-2a0c-48d8-9cd1-81b0c06f6a2a"
      },
      "source": [
        "model =RandomForestClassifier()\n",
        "\n",
        "dist = dict(n_estimators = randint(1,200), max_features =['sqrt', 'log2'])\n",
        "\n",
        "mdl = RandomizedSearchCV(model, dist, random_state= 1708, verbose=3, n_jobs =-1)\n",
        "\n",
        "srch =mdl.fit(Xcv_train_matrix, y_train_list)\n",
        "print(srch.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "RST_CV_RF_score_test =srch.score(Xcv_test_matrix, y_test_list)\n",
        "print(RST_CV_RF_score_test)"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:  4.0min\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  8.1min finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'max_features': 'sqrt', 'n_estimators': 95}\n",
            "0.7793345008756567\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vQ6DXcdCQQe0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "7a7262fa-8943-487c-e0d3-90b9ef908ede"
      },
      "source": [
        "print(classification_report(y_test_list, srch.predict(Xcv_test_matrix)) )"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.76      0.91      0.83      1318\n",
            "           1       0.83      0.60      0.70       966\n",
            "\n",
            "    accuracy                           0.78      2284\n",
            "   macro avg       0.79      0.76      0.76      2284\n",
            "weighted avg       0.79      0.78      0.77      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kh_5H_glQQe2",
        "colab_type": "text"
      },
      "source": [
        "### TF+RF"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9fWDoyYhQQe3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "1afc6110-ea8d-416e-d3eb-593fe01340e2"
      },
      "source": [
        "model =RandomForestClassifier()\n",
        "\n",
        "dist = dict(n_estimators = randint(1,200), max_features =['sqrt', 'log2'])\n",
        "\n",
        "mdl = RandomizedSearchCV(model, dist, random_state= 1708, verbose=3, n_jobs =-1)\n",
        "\n",
        "srch =mdl.fit(Xtf_train_matrix, y_train_list)\n",
        "print(srch.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "RST_TF_RF_score_test =srch.score(Xtf_test_matrix, y_test_list)\n",
        "print(RST_TF_RF_score_test)"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:  3.8min\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  7.7min finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'max_features': 'sqrt', 'n_estimators': 169}\n",
            "0.7968476357267951\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dGXi-U8_QQe6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "5fcaa00c-e57c-49f0-96e9-eaf61b89af29"
      },
      "source": [
        "print(classification_report(y_test_list, srch.predict(Xtf_test_matrix)) )"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.78      0.91      0.84      1318\n",
            "           1       0.83      0.65      0.73       966\n",
            "\n",
            "    accuracy                           0.80      2284\n",
            "   macro avg       0.81      0.78      0.78      2284\n",
            "weighted avg       0.80      0.80      0.79      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EI_0vam2QQe9",
        "colab_type": "text"
      },
      "source": [
        "### CV+XGB"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NtstHIp0QQe9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "111455a7-6767-40cc-ec6d-76bd83a93308"
      },
      "source": [
        "model =xgb.XGBClassifier(objective=\"binary:logistic\", n_jobs=-1, random_state= 42)\n",
        "\n",
        "dist = dict(n_estimators = randint(1,300), learning_rate =uniform(loc=0.05, scale=.5))\n",
        "\n",
        "mdl = RandomizedSearchCV(model, dist, random_state= 1708, verbose=3, n_jobs =-1)\n",
        "\n",
        "srch =mdl.fit(Xcv_train_matrix, y_train_list)\n",
        "print(srch.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "RST_CV_XGB_score_test =srch.score(Xcv_test_matrix, y_test_list)\n",
        "print(RST_CV_XGB_score_test)"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:   58.1s\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  2.0min finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'learning_rate': 0.3757849544199577, 'n_estimators': 282}\n",
            "0.7902802101576182\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gEtNJVMHQQfA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "2ffb41e2-5291-4b02-fb8b-611dd2271626"
      },
      "source": [
        "print(classification_report(y_test_list, srch.predict(Xcv_test_matrix)) )"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.78      0.89      0.83      1318\n",
            "           1       0.81      0.66      0.73       966\n",
            "\n",
            "    accuracy                           0.79      2284\n",
            "   macro avg       0.80      0.77      0.78      2284\n",
            "weighted avg       0.79      0.79      0.79      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PZ_2ogVEQQfD",
        "colab_type": "text"
      },
      "source": [
        "## TF+XGB "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "faOW-eICQQfG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "40b018a8-4a07-4f5e-9f46-850b93385533"
      },
      "source": [
        "model =xgb.XGBClassifier(objective=\"binary:logistic\", n_jobs=-1, random_state= 42)\n",
        "\n",
        "dist = dict(n_estimators = randint(1,300), learning_rate =uniform(loc=0.05, scale=.5))\n",
        "\n",
        "mdl = RandomizedSearchCV(model, dist, random_state= 1708, verbose=3, n_jobs =-1)\n",
        "\n",
        "srch =mdl.fit(Xtf_train_matrix, y_train_list)\n",
        "print(srch.best_params_)\n",
        "\n",
        "# score with the tuned model\n",
        "RST_TF_XGB_score_test =srch.score(Xtf_test_matrix, y_test_list)\n",
        "print(RST_TF_XGB_score_test)"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:  1.1min\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  2.2min finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'learning_rate': 0.3757849544199577, 'n_estimators': 282}\n",
            "0.7762697022767076\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jNOX9u6UQQfK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "cf3e8e8b-6830-45c6-f7cf-d6f46928b45b"
      },
      "source": [
        "print(classification_report(y_test_list, srch.predict(Xtf_test_matrix)) )"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.76      0.89      0.82      1318\n",
            "           1       0.81      0.62      0.70       966\n",
            "\n",
            "    accuracy                           0.78      2284\n",
            "   macro avg       0.78      0.76      0.76      2284\n",
            "weighted avg       0.78      0.78      0.77      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-nz8YbJ4QQfR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "391641ef-1b3c-4370-fb3c-ebca2afc6c56"
      },
      "source": [
        "y_pred =srch.predict(Xtf_test_matrix)\n",
        "confusion_matrix(y_test_list, y_pred)"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1176,  142],\n",
              "       [ 369,  597]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hdc5vVGAQQfW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "88a31e2e-9e35-4a6e-e91e-0e729f470708"
      },
      "source": [
        "print(' ')\n",
        "print('*** Optimized Params via RandomizedSearchCV')\n",
        "\n",
        "print('--------- CV features ------------------------')\n",
        "print('score for RST_CV->LR:', RST_CV_LR_score_test)\n",
        "print('score for RST_CV->RF:', RST_CV_RF_score_test)\n",
        "print('score for RST_CV->XGB:', RST_CV_XGB_score_test)\n",
        "\n",
        "print('--------- TFIDF features ---------------------')\n",
        "print('score for RST_TF->LR:', RST_TF_LR_score_test)\n",
        "print('score for RST_TF->RF:', RST_TF_RF_score_test)\n",
        "print('score for RST_TF->XGB:', RST_TF_XGB_score_test)\n"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " \n",
            "*** Optimized Params via RandomizedSearchCV\n",
            "--------- CV features ------------------------\n",
            "score for RST_CV->LR: 0.8007880910683012\n",
            "score for RST_CV->RF: 0.7793345008756567\n",
            "score for RST_CV->XGB: 0.7902802101576182\n",
            "--------- TFIDF features ---------------------\n",
            "score for RST_TF->LR: 0.7999124343257443\n",
            "score for RST_TF->RF: 0.7968476357267951\n",
            "score for RST_TF->XGB: 0.7762697022767076\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "unfCtMmnQQfZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "P6sH50nxG7Vl"
      },
      "source": [
        "# Word2Vec model using Spacy"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "NyJFj_OfG45N",
        "colab": {}
      },
      "source": [
        "# Import Libraries\n",
        "import spacy\n",
        "import gensim.downloader as api\n",
        "from gensim.test.utils import get_tmpfile\n",
        "from gensim.models import Word2Vec"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "xeQatlUEPMZF",
        "colab": {}
      },
      "source": [
        "# Download Spacy trained model \n",
        "# !python -m spacy download en_core_web_lg"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Omx-AN4SPXot",
        "colab": {}
      },
      "source": [
        "# Load spacy trained model\n",
        "nlp = spacy.load(\"en_core_web_lg\")"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "6VeYiHkziRjU",
        "colab": {}
      },
      "source": [
        "# review train corpus\n",
        "X_train_list[:3]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "6xRLX7tsiVry",
        "colab": {}
      },
      "source": [
        "# convert to list\n",
        "train_df['corpus'] = cleaned_tweets_lst"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "uEYtpP2O2Pjt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "48e3a93c-6f3c-4fa5-bd70-3c1aa9334d7a"
      },
      "source": [
        "train_df.head()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>keyword</th>\n",
              "      <th>location</th>\n",
              "      <th>text</th>\n",
              "      <th>target</th>\n",
              "      <th>cleaned_tweets</th>\n",
              "      <th>corpus</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Our Deeds are the Reason of this #earthquake M...</td>\n",
              "      <td>1</td>\n",
              "      <td>[deeds, reason, earthquake, allah, forgive]</td>\n",
              "      <td>deeds reason earthquake allah forgive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Forest fire near La Ronge Sask. Canada</td>\n",
              "      <td>1</td>\n",
              "      <td>[forest, near, la, ronge, sask, canada]</td>\n",
              "      <td>forest near la ronge sask canada</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>All residents asked to 'shelter in place' are ...</td>\n",
              "      <td>1</td>\n",
              "      <td>[residents, asked, shelter, place, notified, o...</td>\n",
              "      <td>residents asked shelter place notified officer...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>13,000 people receive #wildfires evacuation or...</td>\n",
              "      <td>1</td>\n",
              "      <td>[13, 000, people, receive, wildfires, evacuati...</td>\n",
              "      <td>13 000 people receive wildfires evacuation ord...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n",
              "      <td>1</td>\n",
              "      <td>[got, sent, photo, ruby, alaska, smoke, wildfi...</td>\n",
              "      <td>got sent photo ruby alaska smoke wildfires pou...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   id  ...                                             corpus\n",
              "0   1  ...              deeds reason earthquake allah forgive\n",
              "1   4  ...                   forest near la ronge sask canada\n",
              "2   5  ...  residents asked shelter place notified officer...\n",
              "3   6  ...  13 000 people receive wildfires evacuation ord...\n",
              "4   7  ...  got sent photo ruby alaska smoke wildfires pou...\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "bPrhbfxm2XBw",
        "colab": {}
      },
      "source": [
        "# tokenize each tweet and append to train_tweet_tokens\n",
        "# This should create 2D array\n",
        "\n",
        "# X_train_list, X_test_list, y_train_list, y_test_list\n",
        "\n",
        "# train each tweet in dataframe with model\n",
        "# tweet_tokens = []\n",
        "# for tweet in train_df['corpus']:\n",
        "#   tweet_tokens.append(nlp(tweet))\n",
        "\n",
        "train_tweet_tokens = []\n",
        "for tweet in X_train_list:\n",
        "  train_tweet_tokens.append(nlp(tweet))"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "ZHPyTvLw4v1n",
        "colab": {}
      },
      "source": [
        "# Vectorize each token in train_tweet_tokens and append to train_tweet_vectors\n",
        "\n",
        "# tweet_vectors = []\n",
        "# for token in tweet_tokens:\n",
        "#   tweet_vectors.append(token.vector)\n",
        "\n",
        "train_tweet_vectors = []\n",
        "for token in train_tweet_tokens:\n",
        "  train_tweet_vectors.append(token.vector)"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "tgY6SHTVFPKV"
      },
      "source": [
        "#Embedding: Word2Vec, Classifier: Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "mbsrRgpyg0SG",
        "colab": {}
      },
      "source": [
        "# Load logistic regression and fit the model to the training data\n",
        "w2v_lr = LogisticRegression(n_jobs=-1).fit(train_tweet_vectors, y_train_list)"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "gV_HNSCpCEvY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "9b761e92-2d76-4ecb-c159-0bd3e89a4a4c"
      },
      "source": [
        "# Check the training accuracy\n",
        "w2v_lr.score(train_tweet_vectors, y_train_list)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8166635391255395"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "wT_tPLVYBG2E",
        "colab": {}
      },
      "source": [
        "# tokenize every tweet in test_corpus and append to test_tweet_tokens\n",
        "\n",
        "test_tweet_tokens = []\n",
        "for tweet in X_test_list:\n",
        "  test_tweet_tokens.append(nlp(tweet))"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "jojvghyQBGd-",
        "colab": {}
      },
      "source": [
        "# Vectorize every tweet token and append to test_tweet_vectors\n",
        "test_tweet_vectors = []\n",
        "for token in test_tweet_tokens:\n",
        "  test_tweet_vectors.append(token.vector)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "hRdxItGrBGWy",
        "colab": {}
      },
      "source": [
        "# run fitted model on test data\n",
        "w2v_lr_test_score = w2v_lr.score(test_tweet_vectors, y_test_list)"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "JmA4iczqC6eY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "171eebdc-fc15-47de-831c-852a01871a63"
      },
      "source": [
        "# Check accuracy of model\n",
        "print('test score = ', w2v_lr_test_score)\n",
        "print(classification_report(y_test_list, w2v_lr.predict(test_tweet_vectors)))"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "test score =  0.7933450087565674\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.84      0.82      1318\n",
            "           1       0.77      0.73      0.75       966\n",
            "\n",
            "    accuracy                           0.79      2284\n",
            "   macro avg       0.79      0.78      0.79      2284\n",
            "weighted avg       0.79      0.79      0.79      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "VuXKR39sbaNq",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wKcdAtdy1iBo",
        "colab_type": "text"
      },
      "source": [
        "# With hyper tuned parameters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "6omVAFLvbd9I",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "f9252907-4fc0-43fc-ea5c-c892a53734a1"
      },
      "source": [
        "# Load libraries and hypertune the parameters\n",
        "# RandomSearchCV is used to reduce time\n",
        "\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from scipy.stats import uniform\n",
        "from scipy.stats import randint\n",
        "dist = dict(C=uniform(loc=0, scale=4),solver =['liblinear', 'newton-cg', 'lbfgs', 'sag', 'saga'], multi_class=['ovr'], l1_ratio=np.linspace(0, 1, num=50))\n",
        "rdm_mdl_w2v_lr = RandomizedSearchCV(w2v_lr, dist, iid= True, random_state = 61, verbose = 3, n_jobs=-1)\n",
        "\n",
        "rdm_mdl_w2v_lr_search = rdm_mdl_w2v_lr.fit(train_tweet_vectors, y_train_list)\n",
        "print(rdm_mdl_w2v_lr_search.best_params_)\n",
        "\n",
        "rdm_mdl_w2v_lr_test_score = rdm_mdl_w2v_lr_search.score(test_tweet_vectors, y_test_list)\n",
        "print(rdm_mdl_w2v_lr_test_score)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:   25.2s\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:   36.1s finished\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py:823: FutureWarning: The parameter 'iid' is deprecated in 0.22 and will be removed in 0.24.\n",
            "  \"removed in 0.24.\", FutureWarning\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:1501: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n",
            "  \"(penalty={})\".format(self.penalty))\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'C': 1.1274755903429812, 'l1_ratio': 0.9183673469387754, 'multi_class': 'ovr', 'solver': 'newton-cg'}\n",
            "0.7933450087565674\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "PTEdUJSgjPXv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "b23926ca-e276-43ae-c154-a9a792ff2d55"
      },
      "source": [
        "# Check accuracy of hypertuned parameters\n",
        "print(classification_report(y_test_list, rdm_mdl_w2v_lr_search.predict(test_tweet_vectors)))"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.84      0.82      1318\n",
            "           1       0.77      0.73      0.75       966\n",
            "\n",
            "    accuracy                           0.79      2284\n",
            "   macro avg       0.79      0.78      0.79      2284\n",
            "weighted avg       0.79      0.79      0.79      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "lGpvmFOejc40",
        "colab": {}
      },
      "source": [
        "# identify confidence scores and create roc curve\n",
        "conf_scores = rdm_mdl_w2v_lr_search.decision_function(test_tweet_vectors)\n",
        "\n",
        "roc_curve_lr = roc_curve(y_test_list, conf_scores)"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "sgrgzED6HQdV",
        "colab": {}
      },
      "source": [
        "conf_scores"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "p-6fSRRKFcX0"
      },
      "source": [
        "#Embedding: Word2Vec, Classifier: Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "utFY2Va1FmWo",
        "colab": {}
      },
      "source": [
        "# Import library\n",
        "from sklearn.ensemble import RandomForestClassifier"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "WdXwxLZbFmT9",
        "colab": {}
      },
      "source": [
        "# fit classifier to training data\n",
        "w2v_rf = RandomForestClassifier(n_jobs=-1).fit(train_tweet_vectors, y_train_list)"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "tyeTTkjjFmRR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "a64b6334-9853-481a-ec9d-3317297c61eb"
      },
      "source": [
        "# Check accuracy of fitted model on trainind data\n",
        "w2v_rf_train_score = w2v_rf.score(train_tweet_vectors, y_train_list)\n",
        "w2v_rf_train_score"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9885531994745731"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Rsuh8SU2FmOj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "3c5eecc5-c567-4d3e-fa09-3c7336965a17"
      },
      "source": [
        "# Run fitted model on test data\n",
        "w2v_rf_test_score  = w2v_rf.score(test_tweet_vectors, y_test_list)\n",
        "w2v_rf_test_score"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.808231173380035"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "l0vQeNEHFl9u",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "e4688a82-50a4-45b3-80ed-c1cb6a1a0851"
      },
      "source": [
        "# Check accuracy and other statistical data\n",
        "print('test score = ', w2v_rf_test_score)\n",
        "print(classification_report(y_test_list, w2v_rf.predict(test_tweet_vectors)))"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "test score =  0.808231173380035\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.91      0.85      1318\n",
            "           1       0.84      0.67      0.75       966\n",
            "\n",
            "    accuracy                           0.81      2284\n",
            "   macro avg       0.82      0.79      0.80      2284\n",
            "weighted avg       0.81      0.81      0.80      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "VOwlrIoq5N5M",
        "colab": {}
      },
      "source": [
        "# Tune with hyperparameters\n",
        "w2v_rf_dist = dict(n_estimators = randint(1,200), max_features =['sqrt', 'log2'])\n",
        "\n",
        "rdm_mdl_w2v_rf = RandomizedSearchCV(w2v_rf, w2v_rf_dist, random_state= 1708, verbose=3, n_jobs =-1)"
      ],
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "1GR0ktUD5N3E",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "2b160d56-ab78-4d7d-e9e6-6d07fb7e50d4"
      },
      "source": [
        "# fit model with hypertuned parameters\n",
        "rdm_mdl_w2v_rf_srch = rdm_mdl_w2v_rf.fit(train_tweet_vectors, y_train_list)"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:  1.2min\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  2.5min finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Ct037m3iA-AS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "3418e3e6-09a8-4d0e-fb85-d90a06f05988"
      },
      "source": [
        "# identify best tuning paramerters\n",
        "print(rdm_mdl_w2v_rf_srch.best_params_)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'max_features': 'log2', 'n_estimators': 199}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "rdv47-Km5Ny_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "85195b13-a568-479b-f9c5-6b9c230bc43b"
      },
      "source": [
        "# score with the tuned model\n",
        "rdm_mdl_w2v_rf_test_score =rdm_mdl_w2v_rf_srch.score(test_tweet_vectors, y_test_list)\n",
        "print(rdm_mdl_w2v_rf_test_score)"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8099824868651488\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "2G3Kxtij5Nn3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "97b5aa93-ea6d-4de3-804e-2674fb2330c6"
      },
      "source": [
        "# obtain all relevant statistical data\n",
        "print(classification_report(y_test_list, rdm_mdl_w2v_rf_srch.predict(test_tweet_vectors)))"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.91      0.85      1318\n",
            "           1       0.85      0.67      0.75       966\n",
            "\n",
            "    accuracy                           0.81      2284\n",
            "   macro avg       0.82      0.79      0.80      2284\n",
            "weighted avg       0.82      0.81      0.81      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "5AP-qMQ4IvoO",
        "colab": {}
      },
      "source": [
        "# Obtain confidence scores and create roc_curve\n",
        "# conf_scores_w2v_rf = rdm_mdl_w2v_rf_srch.predict_proba(test_tweet_vectors)\n",
        "\n",
        "# roc_curve_w2v_rf = roc_curve(y_test_list, conf_scores_w2v_rf)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "i-OO_2D1HqCE"
      },
      "source": [
        "#Embedding: Word2Vec, Classifier: XGBoost"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Gezol-quH8zq",
        "colab": {}
      },
      "source": [
        "# import library\n",
        "import xgboost as xgb"
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "07XZ1_IEH8wq",
        "colab": {}
      },
      "source": [
        "# load xboost classifier\n",
        "w2v_xgb = xgb.XGBClassifier(objective=\"binary:logistic\", n_jobs=-1, random_state= 42)"
      ],
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "aaktooevH8tp",
        "colab": {}
      },
      "source": [
        "# list of list is not compatible with XGBoost\n",
        "# must be converted to numpy array\n",
        "train_tweet_vectors = np.asarray(train_tweet_vectors)\n",
        "w2v_xgb = w2v_xgb.fit(train_tweet_vectors, y_train_list)"
      ],
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "ES4j2-XYDHst",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f2805ae9-8e5e-47d6-9707-4bcd51a399b6"
      },
      "source": [
        "# confirming the shape of the 2D array to make sure nothing has change after transformation\n",
        "train_tweet_vectors.shape"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5329, 300)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "odLWZJXNH8ov",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "9f57aaf7-a5a6-4027-9d11-745f491ea1a1"
      },
      "source": [
        "# fit model and find accuracy\n",
        "w2v_xgb_train_score = w2v_xgb.score(train_tweet_vectors, y_train_list)\n",
        "w2v_xgb_train_score"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8722086695440046"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "pt0RN--gH8l9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "c010ad21-daad-48bf-eb17-2a6471d34221"
      },
      "source": [
        "# run fitted model and test data\n",
        "w2v_xgb_test_score = w2v_xgb.score(test_tweet_vectors, y_test_list)\n",
        "w2v_xgb_test_score"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8169877408056042"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "mL5m0utfKGGb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "5a95ccf8-9d61-48db-8dc0-2ae914f86b4e"
      },
      "source": [
        "# check statistically relevant data\n",
        "print('train score = ', w2v_xgb_train_score)\n",
        "print('test score = ', w2v_xgb_test_score)\n",
        "print(classification_report(y_test_list, w2v_xgb.predict(test_tweet_vectors)))"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train score =  0.8722086695440046\n",
            "test score =  0.8169877408056042\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.87      0.85      1318\n",
            "           1       0.81      0.74      0.77       966\n",
            "\n",
            "    accuracy                           0.82      2284\n",
            "   macro avg       0.82      0.81      0.81      2284\n",
            "weighted avg       0.82      0.82      0.82      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "fYQTv2BpC1sZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "27abf3e7-d1de-450f-ef0a-2d2908b8b829"
      },
      "source": [
        "# Hypertune parameters\n",
        "rdm_mdl_w2v_xgb_dist = dict(n_estimators = randint(1,300), learning_rate = uniform(loc=0.05, scale=.5))\n",
        "rdm_mdl_w2v_xgb = RandomizedSearchCV(w2v_xgb, rdm_mdl_w2v_xgb_dist, random_state=1708, verbose=3, n_jobs =-1)\n",
        "\n",
        "rdm_mdl_w2v_xgb_srch = rdm_mdl_w2v_xgb.fit(train_tweet_vectors, y_train_list)"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:  3.8min\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  7.8min finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "RwiqEdU-C1qm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "4ffdfa2d-4ec4-41c2-a558-f958d30c8f7c"
      },
      "source": [
        "# Identify best parameters\n",
        "print(rdm_mdl_w2v_xgb_srch.best_params_)"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'learning_rate': 0.12712354107224427, 'n_estimators': 292}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "B-HHNxVeC1jZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "6cc7c954-8d50-4bba-bc2b-e0c08cf23df8"
      },
      "source": [
        "# score with the tuned model\n",
        "rdm_mdl_w2v_xgb_test_score =rdm_mdl_w2v_xgb.score(test_tweet_vectors, y_test_list)\n",
        "print(rdm_mdl_w2v_xgb_test_score)"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8248686514886164\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "PSD_rJoukdjK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "f62564cd-6ad4-42cb-8f4d-e6c98d91bc93"
      },
      "source": [
        "# check statistically relevant data\n",
        "print(classification_report(y_test_list, rdm_mdl_w2v_xgb_srch.predict(test_tweet_vectors)))"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.88      0.85      1318\n",
            "           1       0.82      0.75      0.78       966\n",
            "\n",
            "    accuracy                           0.82      2284\n",
            "   macro avg       0.82      0.81      0.82      2284\n",
            "weighted avg       0.82      0.82      0.82      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "8ZAftFo6GxI-",
        "colab": {}
      },
      "source": [
        "# conf_scores_w2v_rf = rdm_mdl_w2v_lr_search.decision_function(test_tweet_vectors)\n",
        "\n",
        "# roc_curve_w2v_rf = roc_curve(y_test_split, conf_scores_w2v_rf)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "WM1UPgZuGxre"
      },
      "source": [
        "#W2V ROC Curve"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "bTIwrw2aGt7m",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 668
        },
        "outputId": "a8ef45a4-85bb-4e32-85f3-d79e7743e53c"
      },
      "source": [
        "fig_1 = plt.figure(figsize=(10,10))\n",
        "plt.plot(roc_curve_lr[0], roc_curve_lr[1])\n",
        "plt.plot([0,1], [0,1])\n",
        "# plt.plot(roc_curve_rf[0], roc_curve_lr[1])\n",
        "# plt.plot(roc_curve_xgb[0], roc_curve_xgb[1])\n",
        "plt.title(\"Word2Vec Logistic Regression ROC Curve\", fontsize=18)\n",
        "plt.xlabel('false positive rate', fontsize=16)\n",
        "plt.ylabel('true positive rate', fontsize=16)\n",
        "plt.xticks(fontsize=14)\n",
        "plt.yticks(fontsize=14)"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([-0.2,  0. ,  0.2,  0.4,  0.6,  0.8,  1. ,  1.2]),\n",
              " <a list of 8 Text major ticklabel objects>)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "iZukFU6GWRTt"
      },
      "source": [
        "# GloVe model Using Spacy"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Cg0iqWcWDBXL",
        "colab": {}
      },
      "source": [
        "# download large GloVe model\n",
        "# !python -m spacy download en_vectors_web_lg"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "07geQ7l7Dy4Z",
        "colab": {}
      },
      "source": [
        "# Load GloVe model\n",
        "GloVe_nlp = spacy.load('en_vectors_web_lg')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Iss4wWZHG3va",
        "colab": {}
      },
      "source": [
        "# tokenize training tweets with trained GloVe model\n",
        "glove_trained_tweet_tokens = []\n",
        "for tweet in X_train_list:\n",
        "  glove_trained_tweet_tokens.append(GloVe_nlp(tweet))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "3mvoWNlALybo",
        "colab": {}
      },
      "source": [
        "# tokenize testing tweets with trained GloVe model\n",
        "glove_test_tweet_tokens = []\n",
        "for tweet in X_test_list:\n",
        "  glove_test_tweet_tokens.append(GloVe_nlp(tweet))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "j9-kcbjQJ__7",
        "colab": {}
      },
      "source": [
        "# vectorize training tokens\n",
        "glove_trained_tweet_vectors = []\n",
        "for token in glove_trained_tweet_tokens:\n",
        "  glove_trained_tweet_vectors.append(token.vector)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "_6XDQJn2MKWG",
        "colab": {}
      },
      "source": [
        "# vectorize test tokens\n",
        "glove_test_tweet_vectors = []\n",
        "for token in glove_test_tweet_tokens:\n",
        "  glove_test_tweet_vectors.append(token.vector)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "mTP-fJZmK5Su"
      },
      "source": [
        "#Embedding: GLoVE, Classifier: Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "8MLmON6NKhoW",
        "colab": {}
      },
      "source": [
        "# fit data to logistic regression\n",
        "glove_lr = LogisticRegression(n_jobs=-1).fit(glove_trained_tweet_vectors, y_train_list)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "LaFv5MUSLND8",
        "colab": {}
      },
      "source": [
        "# find score of training data and test data\n",
        "glove_lr_train_score = glove_lr.score(glove_trained_tweet_vectors, y_train_list)\n",
        "glove_lr_test_score = glove_lr.score(glove_test_tweet_vectors, y_test_list)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "yOkoS5j6LGDo",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 217
        },
        "outputId": "1f1f60ae-9abd-46d6-abc7-f8068141549c"
      },
      "source": [
        "# print staticically relevant data\n",
        "print('train score = ', glove_lr_train_score)\n",
        "print('test score = ', glove_lr_test_score)\n",
        "print(classification_report(y_test_list, glove_lr.predict(test_tweet_vectors)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train score =  0.8151623193844999\n",
            "test score =  0.7942206654991243\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.84      0.82      1318\n",
            "           1       0.77      0.73      0.75       966\n",
            "\n",
            "    accuracy                           0.79      2284\n",
            "   macro avg       0.79      0.79      0.79      2284\n",
            "weighted avg       0.79      0.79      0.79      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "NyW9WYtgS_uV",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "_xFq34kGQxze",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 126
        },
        "outputId": "0773a8fa-fb0b-48c9-fdc9-4531805b5868"
      },
      "source": [
        "# With hyper tuned parameters\n",
        "dist = dict(C=uniform(loc=0, scale=4),solver =['liblinear', 'newton-cg', 'lbfgs', 'sag', 'saga'], max_iter= np.linspace(100, 1000, num=10))\n",
        "rdm_mdl_glove_lr = RandomizedSearchCV(glove_lr, dist, random_state = 61, verbose = 3, n_jobs=-1)\n",
        "\n",
        "rdm_mdl_glove_lr_search = rdm_mdl_glove_lr.fit(train_tweet_vectors, y_train_list)\n",
        "print(rdm_mdl_glove_lr_search.best_params_)\n",
        "\n",
        "rdm_mdl_glove_lr_test_score = rdm_mdl_glove_lr_search.score(test_tweet_vectors, y_test_list)\n",
        "print(rdm_mdl_glove_lr_test_score)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:   23.0s\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:   28.7s finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "{'C': 0.1594926960689973, 'max_iter': 600.0, 'solver': 'lbfgs'}\n",
            "0.8007880910683012\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "IAfCuq-9Qxwa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        },
        "outputId": "54aeb5c5-6403-4634-cbd1-b2914bc38713"
      },
      "source": [
        "# print staticically relevant data\n",
        "print(classification_report(y_test_list, rdm_mdl_glove_lr_search.predict(test_tweet_vectors)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.85      0.83      1318\n",
            "           1       0.78      0.73      0.76       966\n",
            "\n",
            "    accuracy                           0.80      2284\n",
            "   macro avg       0.80      0.79      0.79      2284\n",
            "weighted avg       0.80      0.80      0.80      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "pei9Xrc7QA0f",
        "colab": {}
      },
      "source": [
        "# find confidence scores for roc curve\n",
        "glove_conf_scores = rdm_mdl_glove_lr_search.decision_function(test_tweet_vectors)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Dym3c-fGQAvQ",
        "colab": {}
      },
      "source": [
        "# Obtain roc curve\n",
        "glove_roc_curve_lr = roc_curve(y_test_list, glove_conf_scores)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "vB0tvKflQxbz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 691
        },
        "outputId": "d95793d5-6719-4230-dd75-459f26b2021d"
      },
      "source": [
        "fig_1 = plt.figure(figsize=(10,10))\n",
        "plt.plot(roc_curve_lr[0], roc_curve_lr[1], label= \"W2V Logistic Regression\")\n",
        "plt.plot(glove_roc_curve_lr[0], glove_roc_curve_lr[1], label= \"Glove Logistic Regression\")\n",
        "plt.plot([0,1], [0,1], label= \"Random Classifier\")\n",
        "plt.legend()\n",
        "# plt.plot(roc_curve_rf[0], roc_curve_lr[1])\n",
        "# plt.plot(roc_curve_xgb[0], roc_curve_xgb[1])\n",
        "plt.title(\"Comparison of Word Embeddings with \\n Logistic Regression ROC Curve\", fontsize=18)\n",
        "plt.xlabel('false positive rate', fontsize=16)\n",
        "plt.ylabel('true positive rate', fontsize=16)\n",
        "plt.xticks(fontsize=14)\n",
        "plt.yticks(fontsize=14)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([-0.2,  0. ,  0.2,  0.4,  0.6,  0.8,  1. ,  1.2]),\n",
              " <a list of 8 Text major ticklabel objects>)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 232
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nWWRWJtC5hMU6FTM+A+hoZsmRTRh/KrhOilMH2B6pXPGsouvEzAYBTYGHopcuflVwvVwCfAEMM7N1\nZrbMzMaamYpBBFRwncwDDjezi8zTGLgKb0+B+KMT3i/8hbfGZQDNgdbRelMVttI1BhLxNnsWtgko\n6fiBZiWMTwq/nhyaiqyT/2Jmg4Ej8HYzyKEr9zoxs5OAB4BrnHMF0Y0Xtyryb6UN0AU4GbgMuBFv\n9+i06ESMO+VeJ865+XgF7WUgF8jC2yJ9XfRiykGU9HP+wLyoUGGTuBI+lvBx4H+cc6v9zhOPzKwa\n8Cpwm3Nupd955L8kAA7v38cC51wGXmm7zMya+hstPpnZicA4YCTe1rneeKXgBT9zSewl+R0g4LYA\nBXi7bQprCmwsYZmNJYzPD7+eHJqKrBMAzOxyvAPcr3XOvROdeHGpvOvkcOAEIN3M0sPTEgAzs3zg\nQudc0V1GUn4V+bfyC7DeObez0LQl4a9H8uutClI+FVkndwOfO+ceDz//1sz2Ah+b2T3OuXXRiSql\nKOnn/IF5UaEtbKVwzuUCi4AeRWb1wDuzpzjzSxi/0DmXF9mE8aeC6wQzuwJvF2gf59zr0UsYfyqw\nTtYDJwHtCz0mAD+H/1ziepSyq+C/lXlA8yLHrB0b/qot0oeoguukJl7JK+zAc/0M98d8oKuZVS80\nrQewAVgVtXd1zulRygO4Eu+4gTS8rQJjgD1Aq/D86cD0QuOPAvYCz4THp4WXv8zv76WqPCqwTq4C\n8vBOvW5W6NHQ7++lqjzKu06KWf5BYLHf30dVe1Tg30ptYC3emaJtgbPwLnfwmt/fS1V5VGCd9An/\n/zUQ7xjDs/BODFnk9/dSVR7hv/cHfnncB9wf/vOR4fmPALMKja+HtyXt70A74FJgF3BrVHP6/UFV\nhgcwCK815+D9dtSt0Lw5wJwi488GvgyPXwkM8Pt7qGqP8qyT8HNXzGNOrHNX5Ud5/50UWVaFLSDr\nBe/aa5nhH1zrgeeAOn5/H1XpUYF1MgT4PrxOfsE7AeEIv7+PqvIAupfwM2JaeP40YFWRZU4C5gLZ\n4XXyAOFLpUXroeuwiYiIiASc9n+LiIiIBJwKm4iIiEjAqbCJiIiIBJwKm4iIiEjAqbCJiIiIBJwK\nm4iIiEjAqbCJSInM7HozW2ZmuWa2o5zLOjN7MErRfFf0+zOzS8xsWDHjuofHdo9lvkNlZn3M7Hq/\n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\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "w5KJSVsiTS-Q"
      },
      "source": [
        "#Embedding: GloVe, Classifier: Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Z-GDdW3LTYe4",
        "colab": {}
      },
      "source": [
        "# fit classifier to trained model\n",
        "glove_rf = RandomForestClassifier(n_jobs=-1).fit(glove_trained_tweet_vectors, y_train_list)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "5F5CTQQNTqJy",
        "colab": {}
      },
      "source": [
        "# Obtain score for train data and test data\n",
        "glove_rf_train_score = glove_rf.score(glove_trained_tweet_vectors, y_train_list)\n",
        "glove_rf_test_score = glove_rf.score(glove_test_tweet_vectors, y_test_list)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "LtKgswPUT3LN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 217
        },
        "outputId": "d36b776e-4483-4200-af79-cc3206099829"
      },
      "source": [
        "# find statistically relevant data\n",
        "print('train score = ', glove_rf_train_score)\n",
        "print('test score = ', glove_rf_test_score)\n",
        "print(classification_report(y_test_list, glove_rf.predict(test_tweet_vectors)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train score =  0.9885531994745731\n",
            "test score =  0.809106830122592\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.90      0.85      1318\n",
            "           1       0.84      0.68      0.75       966\n",
            "\n",
            "    accuracy                           0.81      2284\n",
            "   macro avg       0.82      0.79      0.80      2284\n",
            "weighted avg       0.81      0.81      0.81      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "NgBqgSGiR-It",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "eb97a081-3fcc-4cb7-9e13-305ab0a3c7da"
      },
      "source": [
        "# Hyper tune parameters\n",
        "glove_rf_dist = dict(n_estimators = randint(1,200), max_features =['sqrt', 'log2'], max_depth=[np.linspace(20, 200, num=10), np.logspace(2, 3, base=2)], min_samples_split=[np.linspace(20, 200, num=10), np.logspace(2, 3, base=2)])\n",
        "\n",
        "rdm_mdl_glove_rf = RandomizedSearchCV(glove_rf, w2v_rf_dist, random_state= 1708, verbose=3, n_jobs =-1)\n",
        "\n",
        "rdm_mdl_glove_rf_srch = rdm_mdl_glove_rf.fit(train_tweet_vectors, y_train_list)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:  1.2min\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  2.6min finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Ol0a2PIAR-Fb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "08d8f14d-3d37-4f7e-e8e5-df6d844f1373"
      },
      "source": [
        "# find best tuning parameters\n",
        "print(rdm_mdl_glove_rf_srch.best_params_)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'max_features': 'log2', 'n_estimators': 199}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "sDhypT-eR9wu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "c2469617-97ec-4e89-ad01-0cf7153f1f5c"
      },
      "source": [
        "# find accuracy of tuned model\n",
        "rdm_mdl_glove_rf_test_score =rdm_mdl_glove_rf_srch.score(test_tweet_vectors, y_test_list)\n",
        "print(rdm_mdl_glove_rf_test_score)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8169877408056042\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "YS27c_h5vTau",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        },
        "outputId": "d1132c58-2131-40a4-a7e5-8ff3477ff94c"
      },
      "source": [
        "# find statistically relevant data\n",
        "print(classification_report(y_test_list, rdm_mdl_glove_rf_srch.predict(test_tweet_vectors)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.92      0.85      1318\n",
            "           1       0.86      0.67      0.76       966\n",
            "\n",
            "    accuracy                           0.82      2284\n",
            "   macro avg       0.83      0.80      0.81      2284\n",
            "weighted avg       0.82      0.82      0.81      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "ZHpnz_5BUGFD"
      },
      "source": [
        "#Embedding: GloVe, Classifier: XGBoost"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "UUErxdpyUAU_",
        "colab": {}
      },
      "source": [
        "# load XGBoost classifier\n",
        "glove_xgb = xgb.XGBClassifier(objective=\"binary:logistic\", n_jobs=-1, random_state= 42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "BNc-pxD9UQ1v",
        "colab": {}
      },
      "source": [
        "# convert list of list to np array of fit the model\n",
        "glove_trained_tweet_vectors = np.asarray(glove_trained_tweet_vectors)\n",
        "glove_xgb = glove_xgb.fit(glove_trained_tweet_vectors, y_train_list)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "1MWpwixGUzvV",
        "colab": {}
      },
      "source": [
        "# find statistically relevant data\n",
        "glove_xgb_train_score = glove_xgb.score(glove_trained_tweet_vectors, y_train_list)\n",
        "glove_xgb_test_score = glove_xgb.score(glove_test_tweet_vectors, y_test_list)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "UnrOGkppVhGO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 217
        },
        "outputId": "a3f6999b-09a1-41f2-dc1f-4009229b2f80"
      },
      "source": [
        "print('train score = ', glove_xgb_train_score)\n",
        "print('test score = ', glove_xgb_test_score)\n",
        "print(classification_report(y_test_list, glove_xgb.predict(test_tweet_vectors)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train score =  0.8693938825295553\n",
            "test score =  0.8213660245183888\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.88      0.85      1318\n",
            "           1       0.82      0.74      0.78       966\n",
            "\n",
            "    accuracy                           0.82      2284\n",
            "   macro avg       0.82      0.81      0.81      2284\n",
            "weighted avg       0.82      0.82      0.82      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "BuTIee3WnREd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "12981af1-0229-4212-cfcc-f51f6d604cb2"
      },
      "source": [
        "# Hypertune parameters\n",
        "rdm_mdl_glove_xgb_dist = dict(n_estimators = randint(1,300), learning_rate = uniform(loc=0.05, scale=.5))\n",
        "rdm_mdl_glove_xgb = RandomizedSearchCV(glove_xgb, rdm_mdl_glove_xgb_dist, random_state=1708, verbose=3, n_jobs =-1)\n",
        "\n",
        "rdm_mdl_glove_xgb_srch = rdm_mdl_glove_xgb.fit(train_tweet_vectors, y_train_list)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 tasks      | elapsed:  4.0min\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  8.3min finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "eP2HXj_4ntZK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "e149a264-747a-4311-a99e-fe52fe8ffa1b"
      },
      "source": [
        "# Find best tuned parameters\n",
        "print(rdm_mdl_glove_xgb_srch.best_params_)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'learning_rate': 0.12712354107224427, 'n_estimators': 292}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "efNKMti3nw0D",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "95691dc1-9cb9-4920-9119-a55e8e2a378f"
      },
      "source": [
        "# score with the tuned model\n",
        "rdm_mdl_glove_xgb_test_score =rdm_mdl_glove_xgb.score(test_tweet_vectors, y_test_list)\n",
        "print(rdm_mdl_glove_xgb_test_score)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8248686514886164\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "ekCYCuqevel3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        },
        "outputId": "c96b389e-d293-447b-be70-d7182ab1081e"
      },
      "source": [
        "# Find statistically relevant data\n",
        "print(classification_report(y_test_list, rdm_mdl_glove_xgb_srch.predict(test_tweet_vectors)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.88      0.85      1318\n",
            "           1       0.82      0.75      0.78       966\n",
            "\n",
            "    accuracy                           0.82      2284\n",
            "   macro avg       0.82      0.81      0.82      2284\n",
            "weighted avg       0.82      0.82      0.82      2284\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "a9di36KzZU9t"
      },
      "source": [
        "#Handling Out Of Vocabulary Words"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VsCJQKQW8_zx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}